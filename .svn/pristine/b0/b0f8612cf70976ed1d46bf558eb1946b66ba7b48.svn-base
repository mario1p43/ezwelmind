package com.ezwel.admin.service.mgr;

import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;

import com.ezwel.admin.common.support.bean.EncryptComponent;
import com.ezwel.admin.domain.entity.common.Manager;
import com.ezwel.admin.domain.entity.mgr.MgrCert;
import com.ezwel.admin.domain.entity.mgr.MgrSub;
import com.ezwel.admin.persist.mgr.CounselorInfoMgrMapper;
import com.ezwel.admin.persist.mgr.MgrMapper;
import com.ezwel.admin.service.mgr.dto.MgrCertDto;
import com.ezwel.admin.service.mgr.dto.MgrDto;
import com.ezwel.admin.service.mgr.dto.MgrSubDto;
import com.ezwel.admin.service.security.UserDetailsHelper;
import com.ezwel.core.support.util.FileUploadUtils;
import com.ezwel.core.support.util.FileUtils;

@Service
public class MgrCounselService {
	/*
	 * 관리자 관리
	 */
	@Resource
	private MgrMapper mgrMapper;
	
	@Resource
	EncryptComponent encryptComponent;
	
	@Resource
	private CounselorInfoMgrService counselorInfoMgrService;
	
	@Resource
	private MgrService mgrService;
	
	@Resource
	private CounselorInfoMgrMapper counselorInfoMgrMapper;
	
	
	public MgrSub getMgrSelectOne(MgrSubDto mgrSubDto) {
		
		return mgrMapper.getMgrSubSelectOne(mgrSubDto);
	}
	
	
	public List<MgrCert> getMgrCertList(MgrCertDto mgrCertDto){
		return mgrMapper.getMgrCertList(mgrCertDto);
	}
	
	//hue
	public List<MgrCert> getMgrCertList2(MgrCertDto mgrCertDto){
		return mgrMapper.getMgrCertList2(mgrCertDto);
	}
	
	
	public int addCounselMgr(MgrDto mgrDto, MgrSubDto mgrSubDto, MgrCertDto mgrCertDto, HttpServletRequest request) {
		
		Manager manager = UserDetailsHelper.getAuthenticatedUser();

		Set<String> set = mgrCertDto.getMultiMap().keySet();
		Iterator<String> iter = set.iterator();
		
		// 파일갯수가 동적이어서 패턴은 file_0, file_1 ...
		while (iter.hasNext()) {
			String key = iter.next();
			if (key.indexOf("file_") == 0) {
				if (mgrCertDto.getMultiMap().get(key).getMulitMultipartFile().getSize() > 0) {
					mgrCertDto.setFileNm(mgrCertDto.getMultiMap().get(key).getFileNm());
					mgrCertDto.setFilePath(mgrCertDto.getMultiMap().get(key).getFileFullPath());
					
					int cnt = Integer.parseInt(key.split("_")[1]);
					
					
					int certCd = Integer.parseInt(request.getParameter("certCd" + cnt));
					mgrCertDto.setCertCd(certCd);
					mgrCertDto.setEtc(request.getParameter("etc" + cnt));
					mgrCertDto.setUserId(mgrDto.getUserId());
					mgrService.insertMgrCert(mgrCertDto);
				}
			}
		}
		mgrDto.setRegId(manager.getUserId());
		mgrDto.setUserPwd(encryptComponent.encode(mgrDto.getUserPwd()));
		counselorInfoMgrService.insertMgrInfo(mgrDto);
		
		// 사진파일이 실제 등록되 있을때만 db에 값 매핑
		if (mgrCertDto.getMultiMap().get("picAdd").getMulitMultipartFile().getSize() > 0) {
			mgrSubDto.setFileNm(mgrCertDto.getMultiMap().get("picAdd").getFileNm());
			mgrSubDto.setFilePath(mgrCertDto.getMultiMap().get("picAdd").getFileFullPath());			
		}
		counselorInfoMgrMapper.insertCounselorInfoMgr(mgrSubDto);
		
		FileUtils.fileAddUpload(mgrCertDto, FileUploadUtils.UPLOAD_DIR_PROP);
		
		return 0;
		
	}
	
	public int addCounselMgr2(MgrDto mgrDto, MgrSubDto mgrSubDto, MgrCertDto mgrCertDto, HttpServletRequest request) {
		
		Manager manager = UserDetailsHelper.getAuthenticatedUser();

		Set<String> set = mgrCertDto.getMultiMap().keySet();
		Iterator<String> iter = set.iterator();
		
		// 파일갯수가 동적이어서 패턴은 file_0, file_1 ...
		while (iter.hasNext()) {
			String key = iter.next();
			if (key.indexOf("file_") == 0) {
				if (mgrCertDto.getMultiMap().get(key).getMulitMultipartFile().getSize() > 0) {
					mgrCertDto.setFileNm(mgrCertDto.getMultiMap().get(key).getFileNm());
					mgrCertDto.setFilePath(mgrCertDto.getMultiMap().get(key).getFileFullPath());
					
					int cnt = Integer.parseInt(key.split("_")[1]);
					
					
					int certCd = Integer.parseInt(request.getParameter("certCd" + cnt));
					mgrCertDto.setCertCd(certCd);
					mgrCertDto.setEtc(request.getParameter("etc" + cnt));
					mgrCertDto.setUserId(mgrDto.getUserId());
					mgrService.insertMgrCert(mgrCertDto);
				}
			}
		}
		mgrDto.setRegId(manager.getUserId());
		mgrDto.setUserPwd(encryptComponent.encode(mgrDto.getUserPwd()));
		counselorInfoMgrService.insertMgrInfo2(mgrDto);
		
		// 사진파일이 실제 등록되 있을때만 db에 값 매핑
		if (mgrCertDto.getMultiMap().get("picAdd").getMulitMultipartFile().getSize() > 0) {
			mgrSubDto.setFileNm(mgrCertDto.getMultiMap().get("picAdd").getFileNm());
			mgrSubDto.setFilePath(mgrCertDto.getMultiMap().get("picAdd").getFileFullPath());			
		}
		counselorInfoMgrMapper.insertCounselorInfoMgr2(mgrSubDto);
		
		FileUtils.fileAddUpload(mgrCertDto, FileUploadUtils.UPLOAD_DIR_PROP);
		
		return 0;
		
	}
	
public int modifyCounselMgr(MgrDto mgrDto, MgrSubDto mgrSubDto, MgrCertDto mgrCertDto, HttpServletRequest request) {
		
		Manager manager = UserDetailsHelper.getAuthenticatedUser();
		
		int nullChk = (mgrCertDto.getMultiMap() == null ? 0 : 1);
		
		if(Integer.parseInt(request.getParameter("count")) > 0 ){
			String[] del = request.getParameter("D").split(",");
			for(int i = 0; i< Integer.parseInt(request.getParameter("count")); i++){
					mgrCertDto.setFileNm(del[i]);
					mgrCertDto.setUserId(mgrDto.getUserId());
					mgrService.deleteMgrCert(mgrCertDto);
			}
		}
		
		if(nullChk == 1){

			Set<String> set = mgrCertDto.getMultiMap().keySet();
			Iterator<String> iter = set.iterator();
			
			// 파일갯수가 동적이어서 패턴은 file_0, file_1 ...
			while (iter.hasNext()) {
				String key = iter.next();
				if (key.indexOf("file_") == 0) {
					if (mgrCertDto.getMultiMap().get(key).getMulitMultipartFile().getSize() > 0) {
						mgrCertDto.setFileNm(mgrCertDto.getMultiMap().get(key).getFileNm());
						mgrCertDto.setFilePath(mgrCertDto.getMultiMap().get(key).getFileFullPath());
						
						int cnt = Integer.parseInt(key.split("_")[1]);
						
						int certCd = Integer.parseInt(request.getParameter("certCd" + cnt));
						mgrCertDto.setCertCd(certCd);
						mgrCertDto.setEtc(request.getParameter("etc" + cnt));
						mgrCertDto.setUserId(mgrDto.getUserId());
						mgrService.insertMgrCert(mgrCertDto);
					}
				}
			}
			// 사진파일이 실제 등록되 있을때만 db에 값 매핑
			if (mgrCertDto.getMultiMap().get("picAdd").getMulitMultipartFile().getSize() > 0) {
				mgrSubDto.setFileNm(mgrCertDto.getMultiMap().get("picAdd").getFileNm());
				mgrSubDto.setFilePath(mgrCertDto.getMultiMap().get("picAdd").getFileFullPath());			
			}
			
			FileUtils.fileAddUpload(mgrCertDto, FileUploadUtils.UPLOAD_DIR_PROP);
		}
		
		//mgrDto.setCenterOwnerYn(request.getParameter("ownerYn"));
		if((manager.getUserId() != mgrDto.getUserId() ) && "Y".equals(mgrDto.getCenterOwnerYn())  ){
			mgrDto.setLoginId(manager.getUserId());
			counselorInfoMgrService.updateCenterOwner(mgrDto);
		}
		
		
		mgrDto.setModiId(manager.getUserId());
		counselorInfoMgrService.updateMgrInfo(mgrDto);
		
		counselorInfoMgrMapper.updateCounselorInfoMgr(mgrSubDto);
		
		// 반려상태의 상담사의 정보가 수정되면 대기 상태로 변경
		if( mgrDto.getMgrStatus().equals("R")) {
			mgrDto.setMgrStatus("S");
			mgrDto.setUseYn("Y");
			mgrDto.setUserId("'" + mgrDto.getUserId() + "'");
			counselorInfoMgrMapper.counselorInfoMgrStatus(mgrDto);
		}
		
		return 0;
		
	}

public int modifyCounselMgr2(MgrDto mgrDto, MgrSubDto mgrSubDto, MgrCertDto mgrCertDto, HttpServletRequest request) {
	
	Manager manager = UserDetailsHelper.getAuthenticatedUser();
	
	int nullChk = (mgrCertDto.getMultiMap() == null ? 0 : 1);
	
	if(Integer.parseInt(request.getParameter("count")) > 0 ){
		String[] del = request.getParameter("D").split(",");
		for(int i = 0; i< Integer.parseInt(request.getParameter("count")); i++){
				mgrCertDto.setFileNm(del[i]);
				mgrCertDto.setUserId(mgrDto.getUserId());
				mgrService.deleteMgrCert(mgrCertDto);
		}
	}
	
	if(nullChk == 1){

		Set<String> set = mgrCertDto.getMultiMap().keySet();
		Iterator<String> iter = set.iterator();
		
		// 파일갯수가 동적이어서 패턴은 file_0, file_1 ...
		while (iter.hasNext()) {
			String key = iter.next();
			if (key.indexOf("file_") == 0) {
				if (mgrCertDto.getMultiMap().get(key).getMulitMultipartFile().getSize() > 0) {
					mgrCertDto.setFileNm(mgrCertDto.getMultiMap().get(key).getFileNm());
					mgrCertDto.setFilePath(mgrCertDto.getMultiMap().get(key).getFileFullPath());
					
					int cnt = Integer.parseInt(key.split("_")[1]);
					
					int certCd = Integer.parseInt(request.getParameter("certCd" + cnt));
					mgrCertDto.setCertCd(certCd);
					mgrCertDto.setEtc(request.getParameter("etc" + cnt));
					mgrCertDto.setUserId(mgrDto.getUserId());
					mgrService.insertMgrCert(mgrCertDto);
				}
			}
		}
		// 사진파일이 실제 등록되 있을때만 db에 값 매핑
		if (mgrCertDto.getMultiMap().get("picAdd").getMulitMultipartFile().getSize() > 0) {
			mgrSubDto.setFileNm(mgrCertDto.getMultiMap().get("picAdd").getFileNm());
			mgrSubDto.setFilePath(mgrCertDto.getMultiMap().get("picAdd").getFileFullPath());			
		}
		
		FileUtils.fileAddUpload(mgrCertDto, FileUploadUtils.UPLOAD_DIR_PROP);
	}
	
	//mgrDto.setCenterOwnerYn(request.getParameter("ownerYn"));
	if((manager.getUserId() != mgrDto.getUserId() ) && "Y".equals(mgrDto.getCenterOwnerYn())  ){
		mgrDto.setLoginId(manager.getUserId());
		counselorInfoMgrService.updateCenterOwner(mgrDto);
	}
	
	
	mgrDto.setModiId(manager.getUserId());
	counselorInfoMgrService.updateMgrInfo2(mgrDto);
	
	counselorInfoMgrMapper.updateCounselorInfoMgr(mgrSubDto);
	
	
	return 0;
	
}

public int modifyMyinfoMgr(MgrDto mgrDto, MgrSubDto mgrSubDto, MgrCertDto mgrCertDto, HttpServletRequest request) {
	
	Manager manager = UserDetailsHelper.getAuthenticatedUser();
	
	int nullChk = (mgrCertDto.getMultiMap() == null ? 0 : 1);

	
	
	if(Integer.parseInt(request.getParameter("count")) > 0 ){
		String[] del = request.getParameter("D").split(",");
		for(int i = 0; i< Integer.parseInt(request.getParameter("count")); i++){
				mgrCertDto.setFileNm(del[i]);
				mgrCertDto.setUserId(mgrDto.getUserId());
				mgrService.deleteMgrCert(mgrCertDto);
		}
	}
	

	if(nullChk == 1 ){
		Set<String> set = mgrCertDto.getMultiMap().keySet();
		Iterator<String> iter = set.iterator();
		
		// 파일갯수가 동적이어서 패턴은 file_0, file_1 ...
		while (iter.hasNext()) {
			String key = iter.next();
			if (key.indexOf("file_") == 0) {
				if (mgrCertDto.getMultiMap().get(key).getMulitMultipartFile().getSize() > 0) {
					mgrCertDto.setFileNm(mgrCertDto.getMultiMap().get(key).getFileNm());
					mgrCertDto.setFilePath(mgrCertDto.getMultiMap().get(key).getFileFullPath());
					
					int cnt = Integer.parseInt(key.split("_")[1]);
					
					int certCd = Integer.parseInt(request.getParameter("certCd" + cnt));
					mgrCertDto.setCertCd(certCd);
					mgrCertDto.setEtc(request.getParameter("etc" + cnt));
					mgrCertDto.setUserId(mgrDto.getUserId());
					mgrService.insertMgrCert(mgrCertDto);
				}
			}else{
				if (mgrCertDto.getMultiMap().get("picAdd").getMulitMultipartFile().getSize() > 0) {
					mgrSubDto.setFileNm(mgrCertDto.getMultiMap().get("picAdd").getFileNm());
					mgrSubDto.setFilePath(mgrCertDto.getMultiMap().get("picAdd").getFileFullPath());			
				}
			}
				
		}

		
		FileUtils.fileAddUpload(mgrCertDto, FileUploadUtils.UPLOAD_DIR_PROP);
	}
	/*if(request.getParameter("pic").equals("Y")){
		// 사진파일이 실제 등록되 있을때만 db에 값 매핑
		if (mgrCertDto.getMultiMap().get("picAdd").getMulitMultipartFile().getSize() > 0) {
			mgrSubDto.setFileNm(mgrCertDto.getMultiMap().get("picAdd").getFileNm());
			mgrSubDto.setFilePath(mgrCertDto.getMultiMap().get("picAdd").getFileFullPath());			
		}
	}*/
	
	
	//mgrDto.setCenterOwnerYn(request.getParameter("ownerYn"));
	if((manager.getUserId() != mgrDto.getUserId() ) && "Y".equals(mgrDto.getCenterOwnerYn())  ){
		mgrDto.setLoginId(manager.getUserId());
		counselorInfoMgrService.updateCenterOwner(mgrDto);
	}
	
	
	mgrDto.setModiId(manager.getUserId());
	//counselorInfoMgrService.updateMgrMyInfo(mgrDto);
	//counselorInfoMgrMapper.updateMyInfoMgr(mgrSubDto);
	
	mgrService.updateMgr(mgrDto);
	mgrService.updateMgrSub(mgrSubDto);
	
	
	
	return 0;
	
}	
	
	
	
	
	
	
}
