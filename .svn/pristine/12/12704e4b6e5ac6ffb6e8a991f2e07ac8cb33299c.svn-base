apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
//apply plugin: 'jdepend'

ext {
    javaVersion 	= '1.8'
	servletVersion 	= '3.1'
    javaEncoding 	= 'UTF-8'
	gradleVersion	= '2.3'
	springVersion 	= '4.1.4.RELEASE'
	ezwelVersion	= '2.0.2475-SNAPSHOT'
	targetServer = project.hasProperty('target') ? project.getProperty('target') : 'local'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
webAppDirName = 'webapp'
archivesBaseName = 'ezwelmind-admin'

version = '1.0.0-SNAPSHOT'
war {
    archiveName = "${baseName}.${extension}"
    manifest {
        attributes 	'Implementation-Title': archivesBaseName,
        			'Implementation-Version': version,
					'CI-Build-Num': project.hasProperty('buildNum') ? project.getProperty('buildNum') : '-1',
        			'Build-SVN-Version': getRevision(),
        			'System-JDK': "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})",
        			'Build-JDK-Version': javaVersion,
        			'Gradle-Version': gradleVersion,
        			'Created-By': 'ddakker@ezwel.com',
        			'Create-Date': new Date().format('yyyy-MM-dd HH:mm:ss').toString()
    }
}


repositories {
	maven {
		url 'http://verify.ezwel.com/nexus/content/groups/public/'
	}
	
	flatDir {
       dirs 'webapp/WEB-INF/lib'
   }
}

dependencies {
 	compile 'com.ibleaders:ibsheet7:1.1.58'
	
	compile 'javax.validation:validation-api:1.0.0.GA'
	compile 'org.hibernate:hibernate-validator:4.2.0.Final'

	compile "com.navercorp.lucy:lucy-xss-servlet:2.0.0"

	compile "com.ezwel:ezwel-core-framework:$ezwelVersion"
	compile "com.ezwel:ezwel-core-support:$ezwelVersion"
	compile "com.ezwel:ezwel-core-tag:$ezwelVersion"
	compile "com.ezwel:ezwel-core-security:$ezwelVersion"
	compile "com.ezwel:ezwel-core-ispn:$ezwelVersion"
	compile "com.ezwel:ezwel-core-rabbitmq:$ezwelVersion"
	
	compile "com.googlecode.json-simple:json-simple:1.1.1"
	// https://mvnrepository.com/artifact/org.apache.poi/poi
	compile group: 'org.apache.poi', name: 'poi', version: '3.9'
	

	if( "$targetServer" == "local" || "$targetServer" == "dev" ){
		compile 'mysql:mysql-connector-java:5.1.34'
	} else {
		compile 'org.mariadb.jdbc:mariadb-java-client:1.1.9'
	}
	compile 'com.google:log4jdbc4:1.2'
	compile 'org.lazyluke:log4jdbc-remix:0.2.7'

	compile 'com.opennaru.khan:khan-session-hotrod:1.3.0.ezwelbuild.2.0.RELEASE'
	

    compile 'org.projectlombok:lombok:+'
    
    compile name: 'gcm-server'
   	compile name: 'JavaPNS_2.2'
   	

	// 회사 Nexus 접근 못 할때!! libs/*.jar 참조
	//compile fileTree(dir: 'libs', include: '*.jar')

	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
	providedCompile "javax.servlet.jsp:javax.servlet.jsp-api:2.2.1"

	testCompile "junit:junit:4.11"
	testCompile "org.hamcrest:hamcrest-all:1.3"
	testCompile "org.springframework:spring-test:$springVersion"
}

configurations {
	// logback 사용[commons-logging 의존성 제거]
	all*.exclude group: 'commons-logging', module: 'commons-logging'
	all*.exclude group: 'org.hamcrest', module: 'hamcrest-core'
	all*.exclude group: 'log4j', module: 'log4j'
	all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	all*.exclude group: 'org.slf4j', module: 'slf4j-simple'
}

// 인코딩
[compileJava, compileTestJava]*.options*.encoding = javaEncoding

eclipse {
	wtp {
		component {
			contextPath = '/'
		}
		facet {
			facet name: 'jst.web', version: servletVersion
			facet name: 'jst.java', version: javaVersion
		}
	}
}

sourceSets {
	if( "$targetServer" != "local" ){
		copy {
			from("src/main/resources/properties-$targetServer"){
				exclude 'logback.xml'
			}
			into "src/main/resources/properties"
		}
		copy {
			from("src/main/resources/properties-$targetServer"){
				include 'logback.xml'
			}
			into("src/main/resources/")
		}
		delete file("src/main/resources/properties-dev")
		delete file("src/main/resources/properties-stage")
		delete file('src/main/resources/properties-real')
	}
}

// src/main/java에 위치한 non java 파일을 output 디렉토리로 복사
processResources {
	from('src/main/java') {
		include '**/*.xml'
	}
	into 'build/classes'
	includeEmptyDirs = true
}

// src/main/java에 위치한 non java 파일을 output 디렉토리로 복사
processTestResources {
	from('src/test/java') {
		include '**/*.xml'
	}

	into 'build/classes'

	includeEmptyDirs = true
}


apply plugin: 'js'
apply plugin: 'css'
buildscript {
    repositories {
    	jcenter()
    }
    dependencies {
       classpath 'com.eriwen:gradle-js-plugin:1.12.1'
       classpath 'com.eriwen:gradle-css-plugin:1.11.1'
    }
}

javascript.source {
	def targetDir = "$project.projectDir" + File.separatorChar + "webapp" + File.separatorChar + "resources" + File.separatorChar + "js"
    dev {
        js {
            srcDir targetDir
            include "**/*.js"
            exclude "**/*.min.js"
        }
    }
}
css.source {
	def targetDir = "$project.projectDir" + File.separatorChar + "webapp" + File.separatorChar + "resources" + File.separatorChar + "css"
    dev {
        css {
            srcDir targetDir
            include "**/*.css"
            exclude "**/*.min.css"
        }
    }
}

javascript.source.dev.js.files.eachWithIndex { jsFile, i ->
	tasks.create(name: "minifyJs${i}", type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
		source 	= jsFile
		dest 	= jsFile
		//dest = jsFile.getAbsolutePath().replace('.js', '.min.js')
	}
}
task allMinifyJs(dependsOn: tasks.matching { Task task ->
		if( "$targetServer" != "local" ){
			task.name.startsWith("minifyJs")
		}
	}
)

css.source.dev.css.files.eachWithIndex { cssFile, i ->
	tasks.create(name: "minifyCss${i}", type: com.eriwen.gradle.css.tasks.MinifyCssTask) {
		source 	= cssFile
		//dest 	= cssFile
    	dest = cssFile.getAbsolutePath().replace('.css','.min.css')

    	yuicompressor {
    		lineBreakPos = -1
    	}
    }
}
task allMinifyCss(dependsOn: tasks.matching { Task task ->
		if ( "$targetServer" != "local" ){
			task.name.startsWith("minifyCss")
		}
	}
)

def getRevision() {
	try {
		if ( "$targetServer" != "local" ){
			def stdout = new ByteArrayOutputStream()
			exec {
				executable = "svn"
				args = ["info"]
				standardOutput = stdout
			}

			if (stdout.toString().trim().indexOf('E155036') > -1) {	// 버전 문제 시
				exec {
					executable = "svn"
					args = ["upgrade"]
					standardOutput = stdout
				}

				exec {
					executable = "svn"
					args = ["info"]
					standardOutput = stdout
				}
			}


			def output = stdout.toString().trim()
			def matchLastChangedRev = output =~ /마지막 수정 리비전: (\d+)/
			if (matchLastChangedRev.count != 1) {
				matchLastChangedRev = output =~ /Last Changed Rev: (\d+)/
			}
			def revision = matchLastChangedRev[0][1]

			return revision as int
		} else {
			return 0;
		}
	} catch(e) {
		return -1;
	}
}

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = gradleVersion
}